In general, the code could be refactored in order to comply with good practices and avoid possible undesired behavior. The first point that we could pay attention, is about resource allocation. In our code, we would probably strengthen our maintainability and code qualiti by separating responsibilities. Resource allocation and usage is, frequently, missunderstood. 
We could also, think about working with exceptions, in order to better control possible undesired situations. At minimum, whenever we face any error situation, we should inform the respective error code for further investigation. That is, a good logging mechanism could help us in face of extreme "in production" errors.
Code conventions like naming and type choice/checking. Meaningfull names, in which the name helps us to identify function/variable semanthics is always tricky to have, but is an effort that worths. Also, writing names according to camelCase, UpperCamelCase (PascalCase) or snake_case is also desirable. And latter, we might be carefull when choosing data types because their representation in memory can cary depending on which environment we are compiling/running our code.
Static code analysis is always helpfull, as it shows us things that we, as develpers, may be "to tired to see". Of couse, static analysis does not eliminate the need for code review, but it certainly helps. Following this logic, unit/integration tests would also do a major boost at code quality.
At last, it is understandable that sometimes we let things go through, but we might want to avoid situations like declaring a variable that is never used, inserting probably meaninless redundant instructions, or forcing implicit data type castings that could result in over/underflows.