1. Explain the different types of containers available in the standard library, what are their differences? Explain use cases for each.
  The containers I have worked with and am more familiar with are array, vector, list, stack, queue, set, and map.  According to the 
  C++ reference documentation, stack and queue are container adaptors in that they use an underlying structure or container and provide
  a specific interface for desired behavior.  Starting with an array, an array is a continuous block of data where each element resides 
  in the same sized block of memory and can be accessed sequentionally or iteratively.  Upon initialization, the array is allocated an amount
  of memory that is specified and is typically a good way to maintain a set of known data.  The array does provide a level of random access
  that a list does not, so it's particularly useful if you have multiple elements that are reused in the code.  Using a basic chatbot as a base case,
  you can set up an array of string with greetings and randomly choose one of the greetings to send out.  You don't expect the chatbot to learn new
  greetings in this case, and the purpose is to provide variety to how the chatbot would initiate a conversation.  Vectors are a dynamic array where you
  can resize and grow on the fly.  The limitation to a basic array is that the memory allocation is set up upon initialization, so when it's out of space,
  the typical solution is to create a new array that's larger and copy the elements over.  A vector can resize itself without needing to create a new vector.
  Continuing with the chatbot greeting, if you wanted the chatbot to learn new greetings, you can compare the existing library of greetings to the response given,
  if it doesn't already exist, you can add it to the vector of greetings.  Now when you randomly access a greeting, you'll have new greetings to use.  A list is
  a grouping of elements where commonly, you would use pointers to connect the elements.  The drawback of this implementation is that you cannoy access the elements randomly,
  as one element points to the next element, so you would have to iterate through every element to reach a given element.  There are no size constraints, so the list can grow
  and shrink as needed.  Lists are usually the basic component of a lot of more complex containers, so stacks and queues are used more often, but lists can be used to track
  data such as the names of the people the chatbot spoke to.  A stack and a queue are very similar, but stacks are last in first out and queues are first in first out.
  The concept here is have an element enter a grouping, and when trying to access the grouping, which element get's accessed first.  A stack will return the last item that
  was added, while a queue will return the earliest element that was added.  A queue is useful for message buffers, so that the chat bot would respond to the earliest messages
  before responding to the newer ones.  A stack is useful for error tracking, so you know which errors were the most recent with the chat bot program.  A set is a container that
  store unique elements, typically a pair of elements with the key being unique and the value being associated with the key.  If the chat bot had a profanity filter, it can
  use the user's id as a key and a boolean flag for whether they violated the filter.  A map is for a lack of better phrasing, a group of sets.  Maps use keys to access
  the values associated with them, so the chatbot could have a map of responses.  The keys could be full sentences or key words, and upon receiving a question, the chat bot
  can use the map to quickly retrieve the response without having to iterate through a list or provide a random response from an array.
  
  I don't believe I've covered all the containers, but these are the ones I am more familiar with.
  
2. What are some sorting algorithms, list at least 3? What are their differences and give use cases for each.
  Bubble sort - compare each element to the one adjacent to it, and swap positions if the element is greater or smaller.  This will end with the largest or smallest element
  at the end of the list.
  Selection sort - compare each element to the current postion to identify which element should be there.  (e.g. smallest at position 0 or largest at position 0) then
  continue with the rest of the elements.
  Quick sort - Identify a pivot element and arrange the elements to less than the pivot or greater than the pivot with the pivot point in it's expected position.
  split the elements into it's smaller components around the pivot point and repeat the process.  The pivot element can be any element, but must be consistent.
  
  All three sorts will sort in place and not require additional memory.  The runtimes vary, bubble sort and selection sort are a O(n^2) algorithm, while Quick sort
  is a O(n log n) and more efficient.  In the worst case scenario, bubble and selection will be given a list of elements in reverse order and will therefore need to
  iterate through every element and compare it to every other element.  Quick sort avoids this inefficiency by splitting the list into smaller problems, on average halving
  the number of elements each time.  Quick sort has a more complex implementation and uses recurssion.  For small sets of data, any of the sorting algorithms will perform well
  and with larger data sets, quick sort would be the preferred algorithm.
  
3. What is the purpose of virtual destructors? What types of issues can arise if not used correctly.
  A virtual destructor is used to prevent undefined behavior when deleting an instance of a derived class through a pointer to a base class.  Deleting an object,
  the destructor of both base class and derived classes are expected to be called, but if the base class's destructor is not virtual, there's a chance the derived
  destructor will not be called.
  
4. Explain the keyword: static. What does it mean in each context?
  Static basically means that a variable, object, or funtion exists throughout the runtime of the program.  There can also only be one instance of a static variable, object, or function
  It is allocated memory and it's instance is not removed upon exit of it's scope.  Static variables persist after the function or method that initialized it exits,
  so the next time the function or method is invoked, the variable persists.  Static objects behave similarly to static variables in that they persist beyond their
  scope.  Specifically, the static object's destructor will be called after the program exits.  Static functions also persist beyond the scope of an object's access
  and can be accessed without the use of an object by invoking the class name.  Static functions can only access static data members or other static member functions though.

5. When are static member variables initialized?
  Static member variables are initialized before they are used by any object they are a member of and are only initialized once.

6. What is the difference between R-Values and L-Values?
  L-value refers to a memory location that identifies an object, r-value refers to the data value that is stored at some address in memeory
  
7. Is this code safe? If so why? If not why?
	std::string foo()
	{
		std::string something = "avalue";
		return something;
	}
	
  I am not sure what safe is in reference to, but this code returns a string to the function calling foo.  A copy of the string is returned, so there isn't risk
  of the original literal being affected.
  
	Bonus: What would most compilers do with this code?
  I did not know this, but looking up the information, the compiler would do a return value optimization.  Need to research more on the concept.
  
8. Why would you use new rather than malloc when allocating an object? Likewise, what's the difference between free and delete?
  The new keyword will "automate" the garbage collection and is less risky than malloc and free.  Calling the new/delete will use the class's constructor and destructors
  where as malloc and free are lower level calls that may ignore some of the class specific garbage collections.

9. Explain the purpose of std::move, and std::forward. 
  std::move gives the resource to another object, accepts an rvalue.  std::forward passes the references as is and is useful for maintaining the references.

10. How do you share resources safely between threads? How would you share an integer value vs user defined type?
  One way would be to use semaphores so that the threads do not try to access the same block of memory simultaneously.  I would share an integer by value
  between threads so that they do not have to wait on one thread to finish processing the data where as a user defined type or variable would require semaphores
  the data can be processed in sequence.

11. What are the some of the principles of object-oriented programming?
  In my opinion, object-oriented programming's primary function is to encapsulate data and protect it.  The objects' data is accessed by member functions
  and ensures that un-intended modification to member data is not allowed or restricted.  OOP also allows for more organization as well as allowing for
  code optimization via inheritance.

12. Explain inheritance vs composition vs aggregation?
  Inheritance is taking on a parent class and building upon it.  Composition is a class with a collection of methods that is shared.  Aggregation is a selective
  inheritance that picks and chooses from another class.  A person class can be inherited by a sub-class such as male and female, both male and female classes
  would accept the methods the person class has and differentiate based on the specifics of male or female, this would be inheritance.  Composition would have methods
  for breathing, moving, eating and the male class would take share those methods with the female class.  The difference in implementation of this is that if all eaters
  become herbivores, changing one method propogates the changes to all sub classes; whereas inheritance would only propagate to people's eating habits.  The alternative
  is that if you only wanted to change people to herbivores, you would need a new method to not affect all other classes using the eating method.  Aggregation would take
  specifics from a class, but not everything.  This may be helpful if chimpanzees class took an aggregate of person as they share many methods, but you would exclude the
  method of being fully erect or primarily 2-legged.
  
13. Should you always initialize variables? 
  It is not required, but variables should be initialized.
  
14. What concept(s) in C++ would you use to manage resources automatically?
  I do not currently use these concepts in my day to day work, but I believe unique_ptr and shared_ptr would be a good start for automatic resource managment.
  
	a. How important are these concepts? 	
    They are good practices especially with multiple threads and owners so resources aren't pre-maturely de-allocated causing errors.
    
	b. What tools are you familiar with for tracking resource allocations?
    I am not familiar with the tools used for tracking resources, but regularly use gdb for debugging.

15. What security concerns have you come across in the past and how have you addressed them?
  A lot of security concerns I have come across deal with buffers not being properly constrained for size limitations.

16. Name some tools and/or techniques that you personally find to be the most helpful surrounding development.
  A good code development environment is the most helpful.  Whether that's a tool like Eclipse or a virtual machine with grep and vi; it's ideal if the tools
  are baselined and each developer can build upon them based on individual preferences.

17. Name some tools and/or techniques that you personally find to be the most helpful surrounding code maintenance. 
  A good repository for the codebase is extremely helpful.  I currently use SVN Tortoise at my job, but am impressed with GitHub's capabilities.  I currently manage
  the trunk for my team and merge in sandboxes to ensure the trunk's integrity, but a rolling trunk has it's own appeals.

18. Scenario: You are dealing with legacy code containing no test suites nor documented requirements, and are required to make a change. Describe your expected process for how you may approach the solution. 
  First I would understand the purpose of the legacy code to the best of my ability within the timeframe of when the changes need to be done as my primary concern is to not change
  the behavior or performance of the legacy code beyond the scope of the code change.  I would also ask my supervisor or mentor regarding any available resources I may not be aware of
  regarding the legacy code.  Finally, I would attempt to see when the portion of code I am trying to modify was last modified to try and track down any additional information.  If no new
  information is acquired, based on the coding standards of the company, I would begin to prototype and test the code with the changes that are required with a focus on the functions
  surrounding the code to ensure bugs are not introduced.  To the best of my ability, my focus would be to be as surgical and precise in the code change as possible.
  
a. Consider both a long term and short-term solutions.
  The short-term would be to make the required change and limit the scope, the long term would be to back fill the test suites and documents for the legacy code to
  prevent a repeat of this situation.  A hybrid solution would also be considered based on budget and timing.

19. What concerns do you had supporting legacy operating systems? (If any)
  I am not sure if this is in reference to an application running on legacy operating systems or if this is referring to maintaining legacy operating systems.  I will
  answer this question assuming it is for the application running on a legacy operating system.  As with most legacy operating systems, a primary concern is that the
  system is no longer getting security updates from the operating system vendor, so known security vulnerabilities and practices would be my first concern.  Next would
  be system specifications and how the application can remain compatible with an older architecture.  Libraries, drivers, dependencies would also be a concern as the
  application may have started using newer technology that is not backwards compatible.

20. Tell us about a project you worked on that you found to be interesting or unusual.
  A few years ago I worked on a project to redesign a operator facing UI for radio control.  The project brought in personnel from different groups and backgrounds,
  and while understanding the standards our group maintains in UI design, the insights from the various personnel provided a very clear reflection on my own limitations
  when considering how to design a UI.  It was a very good collaboration experience that I was able to lead and feel that the early investment yielded much better results
  because there was early discussions on how we implement the UI.
  
  
