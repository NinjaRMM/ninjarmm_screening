#include <iostream>
#include <sstream>
#include <vector>

// Trick learned from Jason Tunner on how to avoid a sheer amount of overlads
// generated by variadic.
template<typename T>
std::string toStringImpl(const T& t) {
  std::stringstream stream;
  stream << t;
  return stream.str();
}

std::vector<std::string> toString() {
  return {};
}

template<typename P, typename ... Q>
std::vector<std::string> toString(const P& p, const Q& ... q) {

  std::vector<std::string> vec;
  vec.push_back(toStringImpl(p));

  const std::vector<std::string> remainder = toString(q...);
  vec.insert(vec.end(), remainder.begin(), remainder.end());

  return  vec;
}


int main() {
  const std::vector<std::string> vec = toString(42, "foo", 1.6180, true);

  for (const auto &s : vec) {
    std::cout << s << '\n';
  }
}
