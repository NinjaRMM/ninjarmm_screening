1. Explain the different types of containers available in the standard library, what are their differences? Explain use cases for each.
    a. "Sequential containers" are used for data structures that store objects of the same type in a linear manner.
       They are usually implemented as arrays or linked-lists. Used if preserving the order of insertion is a necessity.  
    b. "Sequential container adapters" are a special type of container class that are wrappers around other sequential container types (such as a vector, deque, or  
        list). These container adapters encapsulate the underlying container type and limit the user interfaces accordingly. Used if controlling the order of 
	extraction is desired, ie., LIFO, FIFO, by priority. 
    b. "Associative containers" provide sorted data structures that provide a fast lookup (O(log n) time) using keys. The STL Associative Container types can be 
        divided in two ways: containers which require unique keys, and those which allow multiple entries using the same key. They are usually implemented as binary 
	trees. Used when the order of insertion doesn't matter but sorted entries are desired. 
    c. "Unordered associative containers" provide unsorted data structures that can be accessed using a hash. Access times are O(n) in the worst-case, but much 
        faster than linear time for most operations, with average times of O(1). They are usually implemented as hash tables. Used when sorted entries are not needed 
	and very fast average operation times are required.
2. What are some sorting algorithms, list at least 3? What are their differences and give use cases for each.
3. What is the purpose of virtual destructors? What types of issues can arise if not used correctly. 
4. Explain the keyword: static. What does it mean in each context?
5. When are static member variables initialized? 
6. What is the difference between R-Values and L-Values?
7. Is this code safe? If so why? If not why?
	std::string foo()
	{
		std::string something = "avalue";

		return something;
	}
	
	Bonus: What would most compilers do with this code?
8. Why would you use new rather than malloc when allocating an object? Likewise, what's the difference between free and delete?
9. Explain the purpose of std::move, and std::forward. 
10. How do you share resources safely between threads? How would you share an integer value vs user defined type? 
11. What are the some of the principles of object-oriented programming?
12. Explain inheritance vs composition vs aggregation?
13. Should you always initialize variables? 
14. What concept(s) in C++ would you use to manage resources automatically?
	a. How important are these concepts? 	
	b. What tools are you familiar with for tracking resource allocations? 
15. What security concerns have you come across in the past and how have you addressed them?
16. Name some tools and/or techniques that you personally find to be the most helpful surrounding development.
17. Name some tools and/or techniques that you personally find to be the most helpful surrounding code maintenance.   
18. Scenario: You are dealing with legacy code containing no test suites nor documented requirements, and are required to make a change. Describe your expected process for how you may approach the solution. 
	a. Consider both a long term and short-term solutions. 
19. What concerns do you had supporting legacy operating systems? (If any)
20. Tell us about a project you worked on that you found to be interesting or unusual.
