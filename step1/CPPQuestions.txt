1. Explain the different types of containers available in the standard library, what are their differences? Explain use cases for each.
    a. "Sequential containers" are used for data structures that store objects of the same type in a linear manner.
       They are usually implemented as arrays or linked-lists. Used if preserving the order of insertion is a necessity.  
    b. "Sequential container adapters" are a special type of container class that are wrappers around other sequential container types (such as a vector, deque, or  
        list). These container adapters encapsulate the underlying container type and limit the user interfaces accordingly. Used if controlling the order of 
	extraction is desired, ie., LIFO, FIFO, by priority. 
    b. "Associative containers" provide sorted data structures that provide a fast lookup (O(log n) time) using keys. The STL Associative Container types can be 
        divided in two ways: containers which require unique keys, and those which allow multiple entries using the same key. They are usually implemented as binary 
	trees. Used when the order of insertion doesn't matter but sorted entries are desired. 
    c. "Unordered associative containers" provide unsorted data structures that can be accessed using a hash. Access times are O(n) in the worst-case, but much 
        faster than linear time for most operations, with average times of O(1). They are usually implemented as hash tables. Used when sorted entries are not needed 
	and very fast average operation times are required.
2. What are some sorting algorithms, list at least 3? What are their differences and give use cases for each.
   a. "Bubble Sort" is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. This algorithm is not 
       suitable for large data sets as its average and worst-case time complexity is quite high. Used for its capability to detect a tiny sorting discrepancy (like a 
       swap of just two elements) in almost-sorted arrays. 
   b. "Merge Sort" is a divide and conquer sorting algorithm. In this algorithm, the array/list is initially divided into two equal halves and then they are combined 
       in a sorted manner. It as a recursive algorithm that continuously splits the array/list in half until it cannot be further divided. 
       Merge Sort is a stable sort which means that elements of equal value in an array/list maintain their original order respectively in the sorted array/list. 
       It requires O(N) extra storage to sort arrays, with N denoting the array size which may be quite expensive. Allocating and de-allocating the extra 
       space used for merge sort with arrays increases the running time of the algorithm. It is used for sorting linked lists as additional 
       space is not required to sort them as you would need to sort arrays, and insertion takes O(1) time.
   c. "Quick Sort" is also a divide and conquer sorting algorithm. It picks an element as a pivot and partitions the given array around the picked pivot. There are 
       several pivot strategies, such as last element, first, random, etc. It is a recursive algorithm that continuously splits the array/list until it cannot be 
       further divided. Quick Sort is an unstable sort which means that elements of equal value in an array/list do not maintain their original order respectively in 
       the sorted array/list. Quick Sort in its general form is an in-place sort and it does not require any extra storage, therefore no extra allocation and 
       deallocation of memory is needed. Due to these factors, Quick Sort is a good choice to sort arrays.
3. What is the purpose of virtual destructors? What types of issues can arise if not used correctly. 
   a.  Making both base and derived classes destructors virtual guarantees that the object of the derived class is destructed properly, i.e., both base class and 
       derived class destructors are called. The order of invocation of such destructors is derived before the base. So one must be careful to not "delete" allocated 
       memory in the base class from the derived class destructor. Also, it must be ascertained that both the base and derived class destructors are virtual, or the 
       destruction of the derived object will have undefined behavior.
4. Explain the keyword: static. What does it mean in each context?
   a. "Global Variables" - the specifier 'static' before the type of the global variable makes it only accessible from within the .cpp file it has been defined in 
       (internal linkage and file scope). It's storage persists for the life of the executing program.
   b. "Local Variables" - the specifier 'static' before the type of the local variable makes it only accessible from within the scope it has been defined in 
       (internal linkage), and its state persists across invocations of said block of code. It's storage persists for the life of the executing program.
   b. "Functions" - the specifier 'static' before the function declaration limits its linkage to internal. It can only be used within the file it was defined in.
   c. "Member Variables of Classes" - the specifier 'static' before the type of the variable within the class makes it accessible outside of an instance of the 
       class (class variable). It is accessible by prepending the class name as a scope identifier along with the scope resolution operator (ClassName::staticVar). 
       It is also accessible through an instance of the class, but it's not considered a best practice. It's storage persists for the life of the executing program.
   d. "Functions of Classes" - the specifier 'static' before the function declaration in a class, means that they are not associated with any object of the class, 
       i.e they have no *this pointer. They can be called using the class name and scope resolution operator (ClassName::staticFunctionName()). Static member 
       functions of a class can only directly access static member variables of a class, since they do not have a *this pointer.
5. When are static member variables initialized? 
   a.  They are initialized prior to program execution and should be done in the .cpp file prior to any use of objects, functions, etc. defined in the same file.
       The order of their definition in the class should be used in initialization as well. 
6. What is the difference between R-Values and L-Values?
   a.  An "l-value" is an expression that yields an object reference, such as a variable name, an array subscript reference, a dereferenced pointer, or a function 
       call that returns a reference. An l-value always has a defined region of storage, so you can take its address.
   b.  An "r-value" is an expression that is not an lvalue. Examples of r-values include literals, the results of most operators, and function calls that return 
       nonreferences. An r-value does not necessarily have any storage associated with it. 
7. Is this code safe? If so why? If not why?
	std::string foo()
	{
		std::string something = "avalue";

		return something;
	}
	
	This code is 100% safe as it returns a string object which will be copied into an instantiated object in the calling scope.
	If this function was returning the reference or pointer to the "something" variable declared within its scope, it would be a problem, as the returned 
	reference/pointer would be to an out of scope variable in the process of being destroyed.  
	
	Bonus: What would most compilers do with this code?
	Nothing! This is legal. 
	
8. Why would you use new rather than malloc when allocating an object? Likewise, what's the difference between free and delete?
   a.  "new" allocates memory and calls the constructor for object initialization. "malloc" allocates memory but does not call the constructor.
        The return type of new is the exact data type while malloc returns void*. new performs the full desired object initialization.
   b.  "delete" deallocates memory and calls the destructor for proper object cleanup. "free" deallocates the memory but does not call the destructor.
        delete performs the full desired object cleanup.   
9. Explain the purpose of std::move, and std::forward. 
   a.  "std::move" - In C++11, in addition to copy constructors, objects can have move constructors. (And in addition to copy assignment operators, they have move 
        assignment operators.) The move constructor is used instead of the copy constructor, if the object has type "rvalue-reference" (Type &&). std::move() is a 
	cast that produces an rvalue-reference to an object, to enable moving from it. It's a new C++ way to avoid copies. For example, using a move constructor, a 
	std::vector could just copy its internal pointer to data to the new object, leaving the moved object in an moved from state, therefore not copying all the 
	data.
   b.  "std::forward" - This is a helper function to allow perfect forwarding of arguments taken as rvalue references to deduced types, preserving any potential move 
        semantics involved. The need for this function stems from the fact that all named values (such as function parameters) always evaluate as lvalues (even those 
	declared as rvalue references), and this poses difficulties in preserving potential move semantics on template functions that forward arguments to other 
	functions. 
	Example:
	void foo(int& i){
            ...
        }
        void foo(int&& i){
            ...
        }
	
	template <typename T>
        void f(T&& val){
            foo(std::forward<T>(val));    // std::forward needed to ensure the second foo function is invoked
        }	
10. How do you share resources safely between threads? How would you share an integer value vs user defined type? 
    a.  You would use synchronization primitives for shared data between threads. Coordinating access to a shared variable is achieved with mutexes and locks in C++.
    b.  For synchronization of integral types, I would likely use "std::atomic<T> x" where T is an integral type and x is a variable of said type. It is lock free. 
    c.  For user defined types (UDTs) I may still use std::atomic but depending on the member variable types, the synchronization of the object across threads may be 
        implemented using locks.
11. What are the some of the principles of object-oriented programming?
    a. "Encapsulation" - the mechanism of data hiding by restricting access to class instance variables via public methods. Instance variables are kept private and 
        their accessor methods are made public. It is the binding of the data and functions that operate on that data into a single unit known as the class.
    b. "Abstraction" - abstracting away the implementation details of a class and only presenting a clean, easy-to-use interface via the class’s member functions.
    c. "Inheritance" - classes can be organized into hierarchies where a class might have one or more parent or child classes. If a class has a parent class, we say 
        it is derived or inherited from the parent class and it represents an “IS-A” type relationship. That is to say, the child class “IS-A” type of the parent 
	class. Therefore, if a class inherits from another class, it automatically obtains much of the same functionality and properties from that class and can be 
	extended to contain separate code and data. A nice feature of inheritance is that it often leads to good code reuse since a parent class’s functions don’t 
	need to be re-defined in any of its child classes.
    d. "Polymorphism" - because derived objects share the same interface as their parents, the calling code can call any function in that class’ interface. At run-
        time, the appropriate function will be called depending on the type of object passed leading to possibly different behaviors. This is termed "run-time 
	polymorphism" and is implemented using virtual functions. Another form is "compile-time polymorphism" that is implemented by overloading functions/operators 
	and using templates.
12. Explain inheritance vs composition vs aggregation?
    a. "Inheritance" is the extending of an existing class by deriving new child classes that "extend" the functionality while "reusing" the existing 
        functionality/code. The child classes implement the "IS-A" relationship to the parent class.
    b. "Aggregation" is the grouping of objects into another object. It's a "uses" relationship. The used objects are independent and can exist outside of the 
        container object. The container object may be destroyed and the used objects can still exist.
    c. "Composition" is a stronger form of aggregation. It's a "owns" relationship. The owned objects are not independent of the container object. They cease to 
        exist when the container object is destroyed.	
13. Should you always initialize variables? 
    a.  Yes! Doing so avoids the possibility of using unitialized values, which may lead to undefined behaviour.
14. What concept(s) in C++ would you use to manage resources automatically?
    a. How important are these concepts? 	
    b. What tools are you familiar with for tracking resource allocations? 
15. What security concerns have you come across in the past and how have you addressed them?
16. Name some tools and/or techniques that you personally find to be the most helpful surrounding development.
17. Name some tools and/or techniques that you personally find to be the most helpful surrounding code maintenance.   
18. Scenario: You are dealing with legacy code containing no test suites nor documented requirements, and are required to make a change. Describe your expected process for how you may approach the solution. 
	a. Consider both a long term and short-term solutions. 
19. What concerns do you had supporting legacy operating systems? (If any)
20. Tell us about a project you worked on that you found to be interesting or unusual.
