/*
NINJARMM Code Review
 
Please review the below code. 
We do not expect you to execute this code, but you are welcome to try. 
Make any code updates that you see fit (If any). 
Comments are encouraged.
*/

/*
Comments:
Depending on desired compactness, breaking some of the error handling out into a function could help clean up the code.
I would also recommend using an enumeration and vector of error strings to limit typos and copy-paste errors, although if
these are debug statements during development, they should be removed from the code base.
*/
struct ThirdPartyAVSoftware
{
    std::wstring Name;
    std::wstring Description;
    std::wstring DefinitionUpdateTime;
    std::wstring DefinitionStatus; //use wstring for consistency
    std::wstring Version;
    std::wstring ProductState;
};

bool queryWindowsForAVSoftwareDataWSC(std::map<std::wstring, ThirdPartyAVSoftware>& thirdPartyAVSoftwareMap)
{
    const std::wstring L_ON = "L On";
    const std::wstring L_OFF = "L Off";
    const std::wstring L_EXPIRED = "L Expired";
    HRESULT hr = S_OK;
    IWscProduct* PtrProduct = nullptr;
    IWSCProductList* PtrProductList = nullptr;
    BSTR PtrVal = nullptr;
    LONG ProductCount = 0;
    WSC_SECURITY_PRODUCT_STATE ProductState;
    WSC_SECURITY_SIGNATURE_STATUS ProductStatus;

    std::wstring displayName, versionNumber, state, timestamp;
    std::wstring definitionState; //use wstring to match struct

    hr = CoCreateInstance(__uuidof(WSCProductList), NULL, CLSCTX_INPROC_SERVER, __uuidof(IWSCProductList), reinterpret_cast<LPVOID*>(&PtrProductList));
    if (FAILED(hr))
    {
        std::cout << "Failed to create WSCProductList object. ";
        return false;
    }

    hr = PtrProductList->Initialize(WSC_SECURITY_PROVIDER_ANTIVIRUS);
    if (FAILED(hr))
    {
        std::cout << "Failed to query antivirus product list. ";
        return false;
    }

    hr = PtrProductList->get_Count(&ProductCount);
    if (FAILED(hr))
    {
        std::cout << "Failed to query product count.";
        return false;
    }

    for (uint32_t i = 0; i < ProductCount; i++)
    {
        hr = PtrProductList->get_Item(i, &PtrProduct);
        if (FAILED(hr))
        {
            std::cout << "Failed to query AV product.";
            continue;
        }

        hr = PtrProduct->get_ProductName(&PtrVal);
        if (FAILED(hr))
        {
            PtrProduct->Release();
            std::cout << "Failed to query AV product name.";
            continue;
        }

        displayName = std::wstring(PtrVal, SysStringLen(PtrVal));

        hr = PtrProduct->get_ProductState(&ProductState);
        if (FAILED(hr))
        {
            //Probably would need release() call
            PtrProduct->Release();
            std::cout << "Failed to query AV product state.";
            continue;
        }

        // Switch statement may clean this section up a little but is not necessary
        // Additionally as the strings are re-used, defining them as constant variables would improve maintainability and readability.
        switch(ProductState) {
          case WSC_SECURITY_PRODUCT_STATE_ON:
            state = L_ON;
            break;
          case WSC_SECURITY_PRODUCT_STATE_OFF:
            state = L_OFF;
            break;
          default:
            state = L_EXPIRED;
            break;
        }

        hr = PtrProduct->get_SignatureStatus(&ProductStatus);
        if (FAILED(hr))
        {
            //Probably would need release() call
            PtrProduct->Release();
            std::cout << "Failed to query AV product product/signature status.";  //checking product/signature status not product definition state.
            continue;
        }

        definitionState = (ProductStatus == WSC_SECURITY_PRODUCT_UP_TO_DATE) ? "UpToDate" : "OutOfDate";

        hr = PtrProduct->get_ProductStateTimestamp(&PtrVal);
        if (FAILED(hr))
        {
            //Probably would need release() call
            PtrProduct->Release();
            std::cout << "Failed to query AV product definition state.";  //Appears to be checking time stamp and not definition state.  Would request verification
            continue;
        }
        timestamp = std::wstring(PtrVal, SysStringLen(PtrVal));
        SysFreeString(PtrVal);

        ThirdPartyAVSoftware thirdPartyAVSoftware;
        thirdPartyAVSoftware.Name = displayName;
        thirdPartyAVSoftware.DefinitionStatus = definitionState;
        thirdPartyAVSoftware.DefinitionUpdateTime = timestamp;
        thirdPartyAVSoftware.Description = state;
        thirdPartyAVSoftware.ProductState = state;
        thirdPartyAVSoftwareMap[thirdPartyAVSoftware.Name] = thirdPartyAVSoftware;

        PtrProduct->Release();
    }

    if (thirdPartyAVSoftwareMap.size() == 0)
    {
        return false;
    }
    return true;
}
